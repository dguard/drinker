//@ sourceMappingURL=index.map
// Generated by CoffeeScript 1.6.1
(function() {
  var Game, Player;

  Player = (function() {

    Player.prototype.cards = [];

    Player.prototype.isWinner = false;

    Player.prototype.isRun = false;

    Player.prototype.options = {};

    function Player(name) {
      this.name = name;
      this.$el = $("#" + this.name + "-container");
    }

    Player.prototype.moveCard = function(cards, typeTurn) {
      var card;
      this.isRun = true;
      this.showMoveCard(typeTurn);
      card = this.cards.pop();
      card['player'] = this.name;
      cards.push(card);
      return this.updateCount();
    };

    Player.prototype.updateCount = function() {
      return this.$el.find('.count').text(this.getCountCards());
    };

    Player.prototype.getCountCards = function() {
      return this.cards.length;
    };

    Player.prototype.packIsEmpty = function() {
      return this.getCountCards() <= 1;
    };

    Player.prototype.showMoveCard = function(typeTurn) {
      var $card, $dest, cardOffset, destOffset, left, self, top;
      this.changeShirt();
      if (typeTurn === 'normal') {
        this.showCard();
      }
      $card = this.$el.find('.card.active');
      $card.css({
        'z-index': 100
      });
      cardOffset = $card.offset();
      $dest = $("." + this.name + "-field").find('.card');
      destOffset = $dest.offset();
      left = destOffset.left - cardOffset.left;
      top = cardOffset.top - destOffset.top;
      self = this;
      return $card.animate({
        left: "+=" + left,
        top: "-=" + top
      }, {
        queue: false,
        duration: self.getSpeed(),
        easing: 'backEaseInOut',
        complete: function() {
          return setTimeout(function() {
            $dest.attr('class', $card.attr('class'));
            self.clearCard();
            if (self.isWinner) {
              return self.showMoveCardBack();
            } else {
              self.isRun = false;
              return self.activateButton();
            }
          }, self.options['speed']);
        }
      });
    };

    Player.prototype.showMoveCardBack = function() {
      var $cards, destOffset, self;
      destOffset = this.$el.find('.card.active').offset();
      $cards = $('#game-container').find('.card');
      self = this;
      return $.map($cards, function(el, i) {
        var $card, cardOffset, left, top;
        $card = $(el);
        $card.css({
          'z-index': 1
        });
        cardOffset = $card.offset();
        left = destOffset.left - cardOffset.left;
        top = cardOffset.top - destOffset.top;
        return $card.animate({
          left: "+=" + left,
          top: "-=" + top + "px"
        }, {
          queue: false,
          duration: self.getBackSpeed(),
          easing: 'linear',
          complete: function() {
            self.clearCard();
            self.updateCount();
            self.changeShirt();
            $card.attr('class', 'card active card-empty');
            $card.css({
              top: 0,
              left: 0
            });
            self.isWinner = false;
            return self.isRun = false;
          }
        });
      });
    };

    Player.prototype.showCard = function() {
      var card, cardClass;
      if (this.cards.length !== 0) {
        card = this.cards.slice(-1)[0];
        cardClass = "card-" + card.type + "-" + card.power;
      } else {
        cardClass = "card-empty";
      }
      return this.$el.find('.card.active').attr('class', "card active " + cardClass);
    };

    Player.prototype.changeShirt = function() {
      var $card;
      $card = this.$el.find('.card.passive');
      if (this.packIsEmpty()) {
        $card.addClass('card-empty');
        return $card.removeClass('card-shirt');
      } else if ($card.hasClass('card-shirt') === false) {
        $card.addClass('card-shirt');
        return $card.removeClass('card-empty');
      }
    };

    Player.prototype.getSpeed = function() {
      return this.options['speed'];
    };

    Player.prototype.getBackSpeed = function() {
      var speed;
      speed = this.options['speed'];
      if (speed > 200) {
        return speed - 200;
      } else {
        return speed;
      }
    };

    Player.prototype.activateButton = function() {
      return $('#turn-btn').removeClass('passive');
    };

    Player.prototype.reset = function() {
      var $cards;
      $cards = this.$el.find('.card');
      return $.map($cards, function(el, i) {
        var $el;
        $el = $(el);
        if ($el.hasClass('card-empty')) {
          $el.removeClass('card-empty');
          return $el.addClass('card-shirt');
        }
      });
    };

    Player.prototype.clearCard = function() {
      var $card;
      $card = this.$el.find('.card.active');
      $card.css({
        left: 0,
        top: 0,
        'z-index': 1
      });
      return $card.attr('class', 'card active card-shirt');
    };

    return Player;

  })();

  Game = (function() {

    Game.prototype.cards = [];

    Game.prototype.typeTurn = 'normal';

    Game.prototype.turn = 1;

    Game.prototype.isRun = false;

    Game.prototype.options = {
      speed: 500
    };

    function Game() {
      this.$el = $('#game-app');
      this.assignEvents();
      this.init();
    }

    Game.prototype.init = function() {
      this.user = new Player('user');
      this.comp = new Player('comp');
      this.initCards();
      this.showTurn();
      return this.updatePlayersOptions();
    };

    Game.prototype.assignEvents = function() {
      $('#turn-btn').on('click', $.proxy(this.onClickTurn, this));
      $('#reset-btn').on('click', $.proxy(this.onClickReset, this));
      $('#decrease-btn').on('click', $.proxy(this.onClickDecrease, this));
      $('#increase-btn').on('click', $.proxy(this.onClickIncrease, this));
      $('#shuffle-btn').on('click', $.proxy(this.onClickShuffle, this));
      $('#change-shirt-btn').on('click', $.proxy(this.onClickChangeShirt, this));
      $('#about-btn').on('click', $.proxy(this.onClickAbout, this));
      return $('.btn').on('selectstart', $.proxy(this.onSelectStart, this));
    };

    Game.prototype.initCards = function() {
      var pack, power, type, _i, _j, _len, _ref;
      pack = [];
      _ref = ['club', 'diamond', 'heart', 'spade'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        type = _ref[_i];
        for (power = _j = 1; _j <= 13; power = ++_j) {
          pack.push({
            type: type,
            power: power
          });
        }
      }
      pack = this.shuffle(pack);
      this.user.cards = pack.slice(0, 26);
      this.comp.cards = pack.slice(26, 53);
      this.user.updateCount();
      return this.comp.updateCount();
    };

    Game.prototype.onClickTurn = function(e) {
      var player, winner;
      e.preventDefault();
      if (this.isRunning()) {
        return;
      }
      this.isRun = true;
      this.showTurn();
      this.deactivateTurnButton();
      this.user.moveCard(this.cards, this.typeTurn);
      this.comp.moveCard(this.cards, this.typeTurn);
      if (this.typeTurn === 'inverse') {
        this.showMessage('Положите еще карту!');
        this.typeTurn = 'normal';
      } else if ((player = this.findWinner()) !== null) {
        if (player.name === 'user') {
          this.showMessage("Вы победили в этом ходу!", 'user');
        } else {
          this.showMessage("Соперник победил в этом ходу!");
        }
        this.moveCardsBack(player);
      } else {
        this.typeTurn = 'inverse';
        this.showMessage('Победитель не определен! <br/> Сделайте еще ход!');
      }
      this.turn++;
      if ((winner = this.findGameWinner()) !== null) {
        if (winner === true) {
          this.showModal('Ничья', 'Игра окончена. Ничья!');
        } else if (winner.name === 'user') {
          this.moveCardsBack(winner);
          this.showModal('Победа! :)', 'Удача была на вашей стороне! <br/> Вы победили!');
        } else {
          this.moveCardsBack(winner);
          this.showModal('Поражение :\'(', 'К сожалению, Вы проиграли!');
        }
        this.toggleButtons();
        this.showMessage('');
      }
      return this.isRun = false;
    };

    Game.prototype.onClickReset = function(e) {
      e.preventDefault();
      if (this.isRunning()) {
        return;
      }
      this.isRun = true;
      this.reset();
      this.init();
      this.showMessage('Началась новая игра!');
      return this.isRun = false;
    };

    Game.prototype.onSelectStart = function(e) {
      e.preventDefault();
      return false;
    };

    Game.prototype.onClickDecrease = function(e) {
      e.preventDefault();
      if (this.options['speed'] < 1000) {
        this.options['speed'] = this.options['speed'] + 100;
        this.changeSpeedText();
        return this.updatePlayersOptions();
      }
    };

    Game.prototype.showModal = function(title, content) {
      var $dialog;
      $dialog = $('#dialog-modal');
      $dialog.find('#modal-title').text(title);
      $dialog.find('.modal-body').html("<p>" + content + "</p>");
      return $dialog.modal('show');
    };

    Game.prototype.onClickIncrease = function(e) {
      e.preventDefault();
      if (this.options['speed'] > 100) {
        this.options['speed'] = this.options['speed'] - 100;
        this.changeSpeedText();
        return this.updatePlayersOptions();
      }
    };

    Game.prototype.onClickShuffle = function(e) {
      e.preventDefault();
      this.shuffle(this.user.cards);
      return this.showMessage('Надеясь на удачу, вы решили перетасовать свою колоду карт.');
    };

    Game.prototype.onClickChangeShirt = function(e) {
      var $body, currentShirt, shirt;
      e.preventDefault();
      $body = $('body');
      currentShirt = $body.attr('class');
      if (currentShirt === 'angry') {
        shirt = 'army';
      } else {
        shirt = 'angry';
      }
      $body.attr('class', shirt);
      return this.showMessage('Магическим образом колода карт изменила свою рубашку!');
    };

    Game.prototype.onClickAbout = function(e) {
      e.preventDefault();
      return this.showModal("Об авторе", $('#about').html());
    };

    Game.prototype.updatePlayersOptions = function() {
      var options;
      options = this.options;
      this.user.options = options;
      return this.comp.options = options;
    };

    Game.prototype.toggleButtons = function() {
      this.$el.find('#turn-btn').toggleClass('hide');
      return this.$el.find('#reset-btn').toggleClass('hide');
    };

    Game.prototype.deactivateTurnButton = function() {
      return this.$el.find('#turn-btn').addClass('passive');
    };

    Game.prototype.reset = function() {
      this.turn = 1;
      this.typeTurn = 'normal';
      this.cards = [];
      this.user.reset();
      this.comp.reset();
      this.toggleButtons();
      return this.$el.find('.card.active').attr('class', 'card active card-empty');
    };

    Game.prototype.isRunning = function() {
      return this.isRun || this.user.isRun || this.comp.isRun;
    };

    Game.prototype.moveCardsBack = function(player) {
      var card, _i, _len, _ref;
      _ref = this.cards;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        card = _ref[_i];
        player.cards.unshift(card);
      }
      this.cards = [];
      return player.isWinner = true;
    };

    Game.prototype.findGameWinner = function() {
      var compIsWinner, userIsWinner;
      compIsWinner = this.user.getCountCards() === 0;
      userIsWinner = this.comp.getCountCards() === 0;
      if (userIsWinner && compIsWinner) {
        return true;
      } else if (compIsWinner) {
        return this.comp;
      } else if (userIsWinner) {
        return this.user;
      } else {
        return null;
      }
    };

    Game.prototype.findWinner = function() {
      var firstCard, firstPower, secondCard, secondPower;
      firstCard = this.cards.slice(-2, -1)[0];
      firstPower = this.countPower(firstCard);
      secondCard = this.cards.slice(-1)[0];
      secondPower = this.countPower(secondCard);
      if (firstPower > secondPower) {
        return this[firstCard.player];
      } else if (firstPower < secondPower) {
        return this[secondCard.player];
      }
      return null;
    };

    Game.prototype.countPower = function(card) {
      if (card.power !== 1) {
        return card.power;
      } else {
        return 14;
      }
    };

    Game.prototype.showMessage = function(text, type) {
      if (type != null) {
        text = "<span class='" + type + "-text'>" + text + "</span>";
      }
      return this.$el.find('.console').html(text);
    };

    Game.prototype.showTurn = function() {
      return this.$el.find('.turn-count').text(this.turn);
    };

    Game.prototype.changeSpeedText = function() {
      var speed;
      speed = (500 / this.options['speed'] * 100).toFixed(0);
      return this.$el.find('#speed-text').text("" + speed + "%");
    };

    Game.prototype.shuffle = function(array) {
      var i, j, x;
      i = array.length;
      while (i) {
        j = parseInt(Math.random() * i);
        x = array[--i];
        array[i] = array[j];
        array[j] = x;
      }
      return array;
    };

    return Game;

  })();

  $(function() {
    return new Game;
  });

}).call(this);
